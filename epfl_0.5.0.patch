diff --git a/aiida/cmdline/commands/data.py b/aiida/cmdline/commands/data.py
index b4551bb..917c035 100644
--- a/aiida/cmdline/commands/data.py
+++ b/aiida/cmdline/commands/data.py
@@ -17,7 +17,7 @@ __contributors__ = "Andrea Cepellotti, Andrius Merkys, Giovanni Pizzi, Leonid Ka
 class Data(VerdiCommandRouter):
     """
     Setup and manage data specific types
-    
+
     There is a list of subcommands for managing specific types of data.
     For instance, 'data upf' manages pseudopotentials in the UPF format.
     """
@@ -29,6 +29,7 @@ class Data(VerdiCommandRouter):
         ## Add here the classes to be supported.
         self.routed_subcommands = {
             'upf': _Upf,
+            'paw': _Paw,
             'structure': _Structure,
             'bands': _Bands,
             'cif': _Cif,
@@ -461,6 +462,8 @@ class Importable(object):
         func(filename, **parsed_args)
 
 
+from aiida.cmdline.vasp.paw import _Paw
+
 class Depositable(object):
     """
     Provides shell completion for depositable data nodes.
@@ -559,7 +562,7 @@ class Depositable(object):
 
 
 # Note: this class should not be exposed directly in the main module,
-# otherwise it becomes a command of 'verdi'. Instead, we want it to be a 
+# otherwise it becomes a command of 'verdi'. Instead, we want it to be a
 # subcommand of verdi data.
 class _Upf(VerdiCommandWithSubcommands, Importable):
     """
@@ -582,12 +585,13 @@ class _Upf(VerdiCommandWithSubcommands, Importable):
             'exportfamily': (self.exportfamily, self.complete_auto)
         }
 
+
     def uploadfamily(self, *args):
         """
         Upload a new pseudopotential family.
-        
+
         Returns the numbers of files found and the number of nodes uploaded.
-        
+
         Call without parameters to get some help.
         """
         import os.path
@@ -685,7 +689,7 @@ class _Upf(VerdiCommandWithSubcommands, Importable):
         else:
             print "No valid UPF pseudopotential family found."
 
-    
+
     def exportfamily(self, *args):
         """
         Export a pseudopotential family into a folder.
@@ -695,7 +699,7 @@ class _Upf(VerdiCommandWithSubcommands, Importable):
         from aiida.common.exceptions import NotExistent
         from aiida.orm import DataFactory
         load_dbenv()
-        
+
         if not len(args) == 2:
             print >> sys.stderr, ("After 'upf export' there should be two "
                                   "arguments:")
@@ -704,7 +708,7 @@ class _Upf(VerdiCommandWithSubcommands, Importable):
 
         folder = os.path.abspath(args[0])
         group_name = args[1]
-        
+
         UpfData = DataFactory('upf')
         try:
             group = UpfData.get_upf_group(group_name)
@@ -720,7 +724,7 @@ class _Upf(VerdiCommandWithSubcommands, Importable):
             else:
                 print >> sys.stdout, ("File {} is already present in the "
                                       "destination folder".format(u.filename))
-        
+
 
     def _import_upf(self, filename, **kwargs):
         """
@@ -934,6 +938,17 @@ class _Bands(VerdiCommandWithSubcommands, Listable, Visualizable, Exportable):
         agrtext = node._exportstring('agr')
         print agrtext
 
+    def _export_matplotlib_pdf(self, node):
+        '''
+        Export a .pdf file with a default plot of the band structure (printed to stdout)
+        '''
+        from aiida_vasp.utils.bands import plot_bstr
+        from StringIO import StringIO
+        sio = StringIO()
+        fig = plot_bstr(node, use_parent_calc=True)
+        fig.savefig(sio, format='pdf')
+        print sio.getvalue()
+
     def _export_dat_multicolumn(self, node):
         """
         Export a .dat file with one line per kpoint, with multiple energy values
@@ -944,7 +959,7 @@ class _Bands(VerdiCommandWithSubcommands, Listable, Visualizable, Exportable):
 
     def _export_dat_blocks(self, node):
         """
-        Export a .dat file with one line per datapoint (kpt, energy), 
+        Export a .dat file with one line per datapoint (kpt, energy),
         with multiple bands separated in stanzas (i.e. having at least an empty
         newline inbetween).
         """
@@ -991,11 +1006,22 @@ class _Bands(VerdiCommandWithSubcommands, Listable, Visualizable, Exportable):
             else:
                 raise
 
+    def _show_matplotlib(self, exec_name, list_bands):
+        '''
+        Show the band structure using matplotlib
+        '''
+        import matplotlib
+        matplotlib.use('TKAgg')
+        from aiida_vasp.utils.bands import plot_bstr
+        for band in list_bands:
+            fig = plot_bstr(band, use_parent_calc=True)
+            fig.show()
+
 
 class _Structure(VerdiCommandWithSubcommands,
-                 Listable, 
-                 Visualizable, 
-                 Exportable, 
+                 Listable,
+                 Visualizable,
+                 Exportable,
                  Importable,
                  Depositable):
     """
@@ -1016,7 +1042,7 @@ class _Structure(VerdiCommandWithSubcommands,
             'deposit': (self.deposit, self.complete_none),
             'import': (self.importfile, self.complete_none),
         }
-        
+
     def query(self, args):
         """
         Perform the query
@@ -1169,7 +1195,7 @@ class _Structure(VerdiCommandWithSubcommands,
                     sys.exit(1)
                 else:
                     raise
-                
+
     def _show_ase(self,exec_name,structure_list):
         """
         Plugin to show the structure with the ASE visualizer
@@ -1177,10 +1203,10 @@ class _Structure(VerdiCommandWithSubcommands,
         try:
             from ase.visualize import view
             for structure in structure_list:
-                view(structure.get_ase()) 
+                view(structure.get_ase())
         except ImportError:
-            raise 
-    
+            raise
+
     def _show_vmd(self, exec_name, structure_list):
         """
         Plugin for vmd
@@ -1279,7 +1305,7 @@ class _Structure(VerdiCommandWithSubcommands,
         """
         # In order to deal with structures that do not have a cell defined:
         # We can increase the size of the cell from the minimal cell
-        # The minimal cell is the cell the just accomodates the structure given, 
+        # The minimal cell is the cell the just accomodates the structure given,
         # defined by the minimum and maximum of position in each dimension
         parser.add_argument('--vacuum-factor', type=float, default=1.0,
                 help = 'The factor by which the cell accomodating the structure should be increased, default: 1.0')
@@ -1563,7 +1589,7 @@ class _Trajectory(VerdiCommandWithSubcommands,
                             help="ID of the trajectory step. If none is "
                                  "supplied, all steps are exported.",
                             type=int, action='store')
-        
+
     def _show_xcrysden(self, exec_name, trajectory_list, **kwargs):
         """
         Plugin for xcrysden
diff --git a/aiida/djsite/db/testbase.py b/aiida/djsite/db/testbase.py
index cc9c97d..2d4902a 100644
--- a/aiida/djsite/db/testbase.py
+++ b/aiida/djsite/db/testbase.py
@@ -29,6 +29,7 @@ db_test_list = {
     'qepwimmigrant': 'aiida.djsite.db.subtests.quantumespressopwimmigrant',
     'tcodexporter': 'aiida.djsite.db.subtests.tcodexporter',
     'workflows': 'aiida.djsite.db.subtests.workflows',
+    'vasp': 'aiida.djsite.db.subtests.vasp',
 }
 
 
diff --git a/docs/source/plugins/index.rst b/docs/source/plugins/index.rst
index d824119..19afe90 100644
--- a/docs/source/plugins/index.rst
+++ b/docs/source/plugins/index.rst
@@ -14,4 +14,4 @@ Available plugins
    codtools/index
    ase/index
    nwchem/index
-
+   vasp/index
